#!/usr/bin/env groovy
import groovy.json.*

def CURRENT_PROJECT_PATH = 'E2E/ARFP-Stratasphere';
def PROD_CONFIG_FILE_ID = '1ad0b80a-404d-45ac-81b1-71cd259794d1';
def QA_CONFIG_FILE_ID = '2a6e4dde-90fd-4b33-870c-94e1ac74261e';
def UAT_CONFIG_FILE_ID = '10596465-25c2-4869-93fe-1b8c63a3dec6';
def EMAILS_SLACK_CONTACTS = '72f4f5fc-2d3c-415d-891d-943c990e74a1';

def PROD_CONFIG_FILE_DESTINATION = 'E2E/ARFP-Stratasphere/cypress/fixtures/environment/prod-param.json';
def QA_CONFIG_FILE_DESTINATION = 'E2E/ARFP-Stratasphere/cypress/fixtures/environment/qa-param.json';
def UAT_CONFIG_FILE_DESTINATION = 'E2E/ARFP-Stratasphere/cypress/fixtures/environment/uat-param.json';

def CONFIG_FILE_PATH = 'E2E/ePort/cypress/fixtures/test-complete/session-creator-jenkins-creds.json';

pipeline {
    agent {
        label 'testexecute'
    }
    tools {
        nodejs '18'
    }
    options {
        ansiColor('xterm')
    }

    stages {

        stage('Cleanup') {
            steps {
                cleanWs()
            }
        }
        stage('Clone Repository') {
            steps {
                script {
                     withCredentials([usernamePassword(credentialsId: 'sabuildserver_GIT_TOKEN', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        def gitUrl = "https://${GIT_USERNAME}:${GIT_PASSWORD}@github.freewheel.tv/HS/EDP_CypressAutomation.git"
                        git url: gitUrl, branch: 'FWS-49164'
                    }
                }
            }
        }

        stage('Config file setup'){
            steps {
                script {
                    // Copy paste Config files from Jenkins to current project
                    
                        inject_config_file(PROD_CONFIG_FILE_ID, PROD_CONFIG_FILE_DESTINATION);
                   
                        inject_config_file(QA_CONFIG_FILE_ID, QA_CONFIG_FILE_DESTINATION);
               
                        inject_config_file(UAT_CONFIG_FILE_ID, UAT_CONFIG_FILE_DESTINATION);

    
                     withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'TE_Agent', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']])  {
                     def username = "${USERNAME}";
                     def password = "${PASSWORD}";
                     def testcomplete = [
                        'username': (username),
                        'password': (password)
                        ];
                    def reporterConfig = readJSON file: CONFIG_FILE_PATH;
                    reporterConfig.put("testcomplete", testcomplete);
                    def json = JsonOutput.toJson(reporterConfig);
                    json = JsonOutput.prettyPrint(json);
                    writeFile(file: CONFIG_FILE_PATH, text: json);

                    def reporterConfig1 = readJSON file: CONFIG_FILE_PATH;
                       testcomplete = [
                        'username': reporterConfig1.testcomplete.username.values[0],
                        'password': reporterConfig1.testcomplete.password.values[0],
                        ];
                        reporterConfig.put("testcomplete", testcomplete);
                        json = JsonOutput.toJson(reporterConfig);
                        json = JsonOutput.prettyPrint(json);
                        writeFile(file: CONFIG_FILE_PATH, text: json);
                     }
                }
            }
        }
        stage('Test') {
            steps {
                bat 'cd E2E\\ePort && npm cache clean --force && npm ci --prefer-offline && npx cypress run --browser chrome --env TC="SessionCreator" --spec "cypress/integration/step-definitions/test-jenkins/test-jenkins.feature"';
            }
        }
    }
    post {
        always {
            script {
                bat 'cd E2E\\ePort && node ./cucumber-html-report.js'
            }
            publishHTML(target: [
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'E2E/ePort/cypress/reports',
                reportFiles: 'cucumber-reports/cucumber-html-report/index.html',
                reportName: 'Cucumber Report',
                reportTitles: 'Cucumber Report'
            ])
            publishHTML(target: [
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'E2E/ePort/cypress/reports',
                reportFiles: 'multi-html-report/index.html',
                reportName: 'Multi HTML Report',
                reportTitles: 'Multi HTML Report'
            ])
            // publishHTML(target: [
            //     allowMissing: false,
            //     alwaysLinkToLastBuild: true,
            //     keepAll: true,
            //     reportDir: 'E2E/SBMS/Test1',
            //     reportFiles: 'test.html',
            //     reportName: 'GS Test TestComplete HTML Report',
            //     reportTitles: 'GS Test TestComplete HTML Report'
            // ])
        }
    }
}
    /*
      Reads the Jenkins config file
      [@param] configFileId: accepts Jenkins config file unique ID
      [@return] values of Jenkins config file
     */ 
    def read_config_file(String configFileId){
        configFileProvider([configFile(fileId: configFileId, variable: 'configFile')]) {
            def fileContent = readFile configFile;
            def jsonFileContent = readJSON text: fileContent;
            return jsonFileContent;
        } 
    }

     /*
      Copies the Jenkins configuration file and adds it to the current project
      [@param] configFileId: accepts Jenkins config file unique ID
      [@param] destinationFilePath: destination file path
     */ 
    def inject_config_file(String configFileId, String destinationFilePath){    
        configFileProvider([configFile(fileId: configFileId, variable: 'configFile')]) {
            def fileContent = readFile configFile;
            def jsonFileContent = readJSON text: fileContent;
            def json = JsonOutput.toJson(jsonFileContent);
            json = JsonOutput.prettyPrint(json);
            writeFile(file: destinationFilePath, text: json);
        }
    } 