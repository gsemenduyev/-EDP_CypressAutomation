#!/usr/bin/env groovy
import groovy.json.*
import hudson.tasks.test.AbstractTestResultAction
import hudson.model.Actionable

@NonCPS
def getTestSummary = { ->
    def summary = ""
    def testResult = junit testResults: 'mocha-junit/results/results-*.xml'

    if (testResult != null) {
        def total = testResult.getTotalCount()
        def failed = testResult.getFailCount()
        def skipped = testResult.getSkipCount()

        summary = "Test results:\n\t"
        summary = summary + ("Passed: " + (total - failed - skipped))
        summary = summary + (", Failed: " + failed)
        summary = summary + (", Skipped: " + skipped)
    } else {
        summary = "No tests found"
    }
    return summary
}

def getSlackColor = { ->
    if (currentBuild.result == "SUCCESS")
        return "good"
    else if (currentBuild.result == "FAILURE")
        return "danger"
    else return "warning"
}

pipeline {
  parameters {
    choice(
      choices: ['onestrata-dev', 'onestrata-regression', 'ep-1strata-auto-us', 'onestrata-performance'], 
      name: 'environment',
      description: 'Select the environment where to run tests',
    )
    choice(
      choices: ['campaign-management', 'fit', 'mdm', 'schedule-builder', 'workflow-management'], 
      name: 'module',
      description: 'Select module whose test to execute',
    )
  }

  environment {
    summary = ''
    slackColor = ''
  }
  
  agent {
    docker {
      label 'al2'
      image 'cypress/browsers:node18.12.0-chrome107'
      args '--ipc=host'
    }
  }

  options {
    ansiColor('xterm')
    timeout(time: 4, unit: 'HOURS')   // timeout on whole pipeline job
  }
  
  stages {
    stage('Create Report portal Run') {
      steps {
        script {
            withCredentials([
              string(credentialsId: 'REPORTPORTAL_TOKEN', variable: 'REPORTPORTAL_TOKEN')
            ]){
            def endpoint = "https://reportportal-strata.freewheel.tv/api/v1"
            def token = REPORTPORTAL_TOKEN
            def launch = (params.environment).toUpperCase() + " " + (params.module).toUpperCase() + " OneStrata E2E tests"
            def description = (params.environment).toUpperCase() + " " + (params.module).toUpperCase() +" OneStrata E2E tests"
            def project = "Ep-OneStrata"

            // Update reporter-config.json
            def reporterConfig = readJSON file: 'reporter-config.json'
            reporterConfig.reporterEnabled = reporterConfig.reporterEnabled + ", " + '@reportportal/agent-js-cypress'
            def testrailReporterOptionsMap = [
              'endpoint': (endpoint),
              'token': (token),
              'launch': (launch),
              'project': (project),
              'description': (description),
              'reportHooks': false,
              'isLaunchMergeRequired': true
            ]

            reporterConfig.put("reportportalAgentJsCypressReporterOptions", testrailReporterOptionsMap)
            def json = JsonOutput.toJson(reporterConfig)
            json = JsonOutput.prettyPrint(json)
            writeFile(file: 'reporter-config.json', text: json)
            }
          }
        }
      }
    stage('Tests') {  
      steps('Cypress Tests') {
        script {
          withCredentials([
            string(credentialsId: 'dbPassword', variable: 'dbPassword')
          ]){
              echo 'Testing..'
              sh 'yarn cache clean --all'
              sh 'yarn install --frozen-lockfile'
              sh "yarn run cucumber -e ${params.environment} -m ${params.module} --headless"
            }
        }
      }
    }
  }
  post {         
    always {
      echo 'Testing Completed!'
      
      // Generate Cucumber Report
      script {
        sh 'yarn run cucumber:report'
      }
      
      // Generate Mochawesome Report
      script {
        try {
        sh(
          returnStdout: true,
          script: 'npx mochawesome-merge mochawesome-report/results/*.json -o mochawesome-report/results/report.json;npx marge mochawesome-report/results/report.json  -o mochawesome-report/results -f mochawesome.html'
        )
        } catch (err){
          echo "[ERROR]: ${err}"
        }
      }
      
      archiveArtifacts allowEmptyArchive: true, artifacts: 'mochawesome-report/**/*.*,mocha-junit/**/*.*,cypress/screenshots/**/*.*,cypress/videos/**/*.*,cypress/reports/**/*.*'
      publishHTML (target : [allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'mochawesome-report/results',
        reportFiles: 'mochawesome.html',
        reportName: 'Mochawesome Report',
        reportTitles: 'Mochawesome Report'])
      publishHTML (target : [allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'cypress/reports/html',
        reportFiles: 'cucumber-report.html',
        reportName: 'Cucumber Report',
        reportTitles: 'Cucumber Report'])
      publishHTML (target : [allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: 'cypress/reports/multi-html-report',
        reportFiles: 'index.html',
        reportName: 'Multi HTML Report',
        reportTitles: 'Multi HTML Report'])
      script{
        summary = getTestSummary()
        slackColor = getSlackColor()
      }
      slackSend (channel: '#qa-onestrata-jenkins-result, @UU49HN3G9', //Riyanka
          color: slackColor,
          message: """*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}
          ${summary}
          More info at: ${env.BUILD_URL}""")
      
      cleanWs()
    }
  }
}