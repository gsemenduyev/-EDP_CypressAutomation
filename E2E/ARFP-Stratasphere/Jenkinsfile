#!/usr/bin/env groovy
import groovy.json.*

def PROD_CONFIG_FILE_ID = '1ad0b80a-404d-45ac-81b1-71cd259794d1';
def QA_CONFIG_FILE_ID = '2a6e4dde-90fd-4b33-870c-94e1ac74261e';
def UAT_CONFIG_FILE_ID = '10596465-25c2-4869-93fe-1b8c63a3dec6';
def EMAILS_SLACK_CONTACTS = '72f4f5fc-2d3c-415d-891d-943c990e74a1';
def PROD_CONFIG_FILE_DESTINATION = 'E2E/ARFP-Stratasphere/cypress/fixtures/environment/prod-param.json';
def QA_CONFIG_FILE_DESTINATION = 'E2E/ARFP-Stratasphere/cypress/fixtures/environment/qa-param.json';
def UAT_CONFIG_FILE_DESTINATION = 'E2E/ARFP-Stratasphere/cypress/fixtures/environment/uat-param.json';
def TEST_RAIL_CONFIG_FILE_PATH = 'E2E/ARFP-Stratasphere/cypress.env.json';
def REPORT_DIR = 'E2E/ARFP-Stratasphere/cypress/reports';


pipeline {
    // agent {

    //     docker {
    //         label 'al2'
    //         image 'cypress/browsers:node18.12.0-chrome107'
    //         args '--ipc=host'
    // }
    // }

       agent {
             label 'testexecute'
    //     docker {
    //         label 'al2'
    //         image 'cypress/browsers:node18.12.0-chrome107'
    //         args '--ipc=host'
    // }
    }
    options{
        ansiColor('xterm')
    }
stages {

         stage('Config file setup'){
            steps {
                script {
                        // Copy paste environments.json file from Jenkins to current project
                        inject_config_file(QA_CONFIG_FILE_ID, QA_CONFIG_FILE_DESTINATION);
                        inject_config_file(UAT_CONFIG_FILE_ID, UAT_CONFIG_FILE_DESTINATION);
                        inject_config_file(PROD_CONFIG_FILE_ID, PROD_CONFIG_FILE_DESTINATION);
                    }
                }
            }

               stage('List Folders') {
            steps {
                echo "Hello ------------------------ 1"
                  sh 'ls -d /*/'
                 echo "Hello ------------------------ 2"
            }
               }
        
        stage('Test') {
            steps {
                       script {
          def programFilesX86 = env['ProgramFiles(x86)']
          def pathToDirectory = "${programFilesX86}\\YourDirectory"
          echo "Path to directory: ${pathToDirectory}"
        }
           
            echo "Hello ------------------------ 3"
            bat 'dir /AD /B "C:\\*"'
          //  sh 'cd C:\\Program Files (x86)\\SmartBear'
            bat 'dir /AD /B "C:\\*"'
            echo "Hello ------------------------ 4"
            sh "cd E2E/ARFP-Stratasphere && npm cache clean --force && npm ci --prefer-offline && npx cypress run --browser chrome --spec \"cypress/integration/step-definitions/agency-version-number/agency-version-number.feature\"";
            }
        }
}
    // post{
    //     always{
    //         script {
    //             // Config files clean up.
    //             sh "cd ${CURRENT_PROJECT_PATH} && node ./cucumber-html-report.js";
    //         }
    //         publishHTML (target : [allowMissing: true,
    //         alwaysLinkToLastBuild: true,
    //         keepAll: true,
    //         reportDir: REPORT_DIR,
    //         reportFiles: 'cucumber-reports/cucumber-html-report/index.html',
    //         reportName: 'Cucumber Report',
    //         reportTitles: 'Cucumber Report']);
    //         publishHTML (target : [allowMissing: true,
    //         alwaysLinkToLastBuild: true,
    //         keepAll: true,
    //         reportDir: REPORT_DIR,
    //         reportFiles: 'multi-html-report/index.html',
    //         reportName: 'Multi HTML Report',
    //         reportTitles: 'Multi HTML Report']);
    //     }
    // }
}

   /*
      Reads the Jenkins config file
      [@param] configFileId: accepts Jenkins config file unique ID
      [@return] values of Jenkins config file
     */ 
    def read_config_file(String configFileId){
        configFileProvider([configFile(fileId: configFileId, variable: 'configFile')]) {
            def fileContent = readFile configFile;
            def jsonFileContent = readJSON text: fileContent;
            return jsonFileContent;
        } 
    }

     /*
      Copies the Jenkins configuration file and adds it to the current project
      [@param] configFileId: accepts Jenkins config file unique ID
      [@param] destinationFilePath: destination file path
     */ 
    def inject_config_file(String configFileId, String destinationFilePath){    
        configFileProvider([configFile(fileId: configFileId, variable: 'configFile')]) {
            def fileContent = readFile configFile;
            def jsonFileContent = readJSON text: fileContent;
            def json = JsonOutput.toJson(jsonFileContent);
            json = JsonOutput.prettyPrint(json);
            writeFile(file: destinationFilePath, text: json);
        }
    } 